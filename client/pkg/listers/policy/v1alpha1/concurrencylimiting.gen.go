// Copyright 2023, OpenSergo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "opensergo.io/api/client/pkg/apis/policy/v1alpha1"
)

// ConcurrencyLimitingLister helps list ConcurrencyLimitings.
// All objects returned here must be treated as read-only.
type ConcurrencyLimitingLister interface {
	// List lists all ConcurrencyLimitings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConcurrencyLimiting, err error)
	// ConcurrencyLimitings returns an object that can list and get ConcurrencyLimitings.
	ConcurrencyLimitings(namespace string) ConcurrencyLimitingNamespaceLister
	ConcurrencyLimitingListerExpansion
}

// concurrencyLimitingLister implements the ConcurrencyLimitingLister interface.
type concurrencyLimitingLister struct {
	indexer cache.Indexer
}

// NewConcurrencyLimitingLister returns a new ConcurrencyLimitingLister.
func NewConcurrencyLimitingLister(indexer cache.Indexer) ConcurrencyLimitingLister {
	return &concurrencyLimitingLister{indexer: indexer}
}

// List lists all ConcurrencyLimitings in the indexer.
func (s *concurrencyLimitingLister) List(selector labels.Selector) (ret []*v1alpha1.ConcurrencyLimiting, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConcurrencyLimiting))
	})
	return ret, err
}

// ConcurrencyLimitings returns an object that can list and get ConcurrencyLimitings.
func (s *concurrencyLimitingLister) ConcurrencyLimitings(namespace string) ConcurrencyLimitingNamespaceLister {
	return concurrencyLimitingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConcurrencyLimitingNamespaceLister helps list and get ConcurrencyLimitings.
// All objects returned here must be treated as read-only.
type ConcurrencyLimitingNamespaceLister interface {
	// List lists all ConcurrencyLimitings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConcurrencyLimiting, err error)
	// Get retrieves the ConcurrencyLimiting from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConcurrencyLimiting, error)
	ConcurrencyLimitingNamespaceListerExpansion
}

// concurrencyLimitingNamespaceLister implements the ConcurrencyLimitingNamespaceLister
// interface.
type concurrencyLimitingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConcurrencyLimitings in the indexer for a given namespace.
func (s concurrencyLimitingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConcurrencyLimiting, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConcurrencyLimiting))
	})
	return ret, err
}

// Get retrieves the ConcurrencyLimiting from the indexer for a given namespace and name.
func (s concurrencyLimitingNamespaceLister) Get(name string) (*v1alpha1.ConcurrencyLimiting, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("concurrencylimiting"), name)
	}
	return obj.(*v1alpha1.ConcurrencyLimiting), nil
}
